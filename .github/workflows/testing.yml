name: ecl testing

on: [push, pull_request]

jobs:
  build-test-cmake:
    name: CMake

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-16.04', 'windows-2016']
        python: ['3.7']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        # required for `git describe --tags` to work
        fetch-depth: 0

    - name: Add things to path
      run: |
        echo "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      if: matrix.os == 'windows-2016'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Check build args
      shell: cmd
      run: |
        where cl
        where cmake
        where msbuild
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        where cl
        where cmake
        where msbuild
      if: matrix.os == 'windows-2016'

    - name: Build ecl
      run: |
        mkdir cmake-build
        cmake -S . -B cmake-build -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
        cmake --build cmake-build
      if: matrix.os == 'ubuntu-16.04'

#    - name: Build ecl
#      shell: cmd
#      run: |
#        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
#        md cmake-build
#        cd cmake-build
#        call cmake -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug ..
#        cd ..
#        call cmake --build cmake-build
#      if: matrix.os == 'windows-2016'

    - name: Run tests
      run: |
        cd cmake-build
        ctest --output-on-failure
      env:
        ECL_SKIP_SIGNAL: absolutely
        ERT_SHOW_BACKTRACE: yes please!
      if: matrix.os == 'ubuntu-16.04'


  build-test-wheel:
    name: Python

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-16.04', 'windows-2016']
        python: ['3.7']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        # required for `git describe --tags` to work
        fetch-depth: 0

    - name: Build Linux Wheel
      uses: docker://quay.io/pypa/manylinux2010_x86_64
      with:
        entrypoint: /github/workspace/ci/github/build_linux_wheel.sh
        args: ${{ matrix.python }}
      if: matrix.os == 'ubuntu-16.04'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Build macOS/Windows Wheel
      run: pip wheel . --no-deps -w dist
      if: matrix.os != 'ubuntu-16.04'

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }} Python ${{ matrix.python }} wheel
        path: dist/*

    - name: Install ecl
      run: |
        pip install wheel
        pip install --find-links dist ecl

    - name: Run Python tests
      run: |
        # Runs tests on installed distribution from an empty directory
        python -m pip install pytest

        # pytest adds every directory up-to and including python/ into sys.path,
        # meaning that "import ecl" will import python/ecl and not the installed
        # one. This doesn't work because the libecl.so library only exists in
        # site-packages, so we copy directories required by the tests out into its
        # own temporary directory.
        mkdir test-run; cd test-run
        mkdir -p {.git,python}
        ln -s {..,$PWD}/bin
        ln -s {..,$PWD}/lib
        ln -s {..,$PWD}/test-data
        cp -R {..,$PWD}/python/tests

        # Env vars
        export ECL_SKIP_SIGNAL=1
        export ERT_SHOW_BACKTRACE=1

        # Run tests
        python -m pytest python/tests
      if: matrix.os == 'ubuntu-16.04'

#  publish:
#    name: Publish to PyPI
#    runs-on: ubuntu-16.04
#    needs: [build-test-wheel]
#
#    # If this is a tagged release
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#
#    steps:
#      - name: Get wheels
#        uses: actions/download-artifact@v2
#        with:
#          path: artifacts
#
#      - name: Move to dist/
#        run: |
#          mkdir dist
#          find artifacts -name "*.whl" -exec mv '{}' dist/ \;
#
#      - name: Publish to PyPI
#        uses: pypa/gh-action-pypi-publish@v1.3.1
#        with:
#          user: statoil-travis
#          password: ${{ secrets.pypi_password }}
